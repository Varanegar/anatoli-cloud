@{
    ViewBag.Title = "محصولات";
}


<div class="container products-page k-rtl">
    <h1>@ViewBag.Title</h1>
    <hr />
    <div class="row">
        <div class="col-md-3">
            <div class="stores">

                <div class="list-group" data-bind="foreach: stores">
                    <a href="#" class="list-group-item" data-bind="text: Name,
                                   css: { active:  $data == $root.chosenStore() },
                                   click: $root.refreshProducts">
                    </a>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="products-grid"></div>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        var storesUrl = '/api/ProductManager/GetStores';
        var productsUrl = '/api/ProductManager/GetProducts';

        function ProductManagerViewModel() {
            // Data
            var self = this;
            self.chosenStore = ko.observable();
            self.stores = ko.observableArray([]);
            self.products = ko.observableArray([]);

            self.refreshStores = function () {
                accountManagerApp.callApi(storesUrl, 'GET', function (data) {
                    self.stores(data);
                    if (self.stores().length > 0) {
                        self.chosenStore(self.stores()[0]);

                        self.initGrid(self.chosenStore().Id);

                        self.refreshProducts(self.chosenStore());
                    }
                });
            };

            self.refreshProducts = function (data) {
                self.chosenStore(data);
                $('.products-grid').data("kendoGrid").dataSource.read();
                $('.products-grid').data("kendoGrid").refresh();
            };

            self.initGrid = function (id) {
                var crudServiceBaseUrl = "/api/ProductManager/",
                dataSource = new kendo.data.DataSource({
                    transport: {
                        read: {
                            url: crudServiceBaseUrl + "GetProducts",
                            dataType: "json",
                            contentType: "application/json",
                            type: "POST",
                            data: { StoreId: self.chosenStore().Id }
                        },
                        update: {
                            url: crudServiceBaseUrl + "UpdateProducts",
                            type: "POST",
                            contentType: "application/json",
                            dataType: "json"
                        },
                        create: {
                            url: crudServiceBaseUrl + "CreateProduct",
                            dataType: "json"
                        },
                        destroy: {
                            url: crudServiceBaseUrl + "DestoryProducts",
                            type: "POST",
                            contentType: "application/json",
                            dataType: "json"
                        },
                        parameterMap: function (options, operation) {
                            options.StoreId = self.chosenStore().Id;
                            if (operation == "read")
                                return kendo.stringify(options);

                            if (operation !== "read" && options.models)
                                return kendo.stringify(options.models);
                        }
                    },
                    batch: true,
                    pageSize: 20,
                    schema: {
                        model: {
                            id: "Id",
                            fields: {
                                Id: { editable: false, nullable: true },
                                ProductName: { editable: false },
                                LargeUnit: { type: "number", validation: { required: true, min: 1 } },
                                SmallUnit: { type: "number", validation: { required: true, min: 1 } }
                            }
                        }
                    }
                });

                $(".products-grid").kendoGrid({
                    dataSource: dataSource,
                    navigatable: true,
                    pageable: true,
                    height: 550,
                    toolbar: ["save", "cancel"],//"create",
                    columns: [
                        { field: "ProductName", title: "نام کالا" },
                        { field: "LargeUnit", title: "تعداد واحد بزرگ", width: 150 },
                        { field: "SmallUnit", title: "تعداد واحد کوچک", width: 150 },
                        { command: "destroy", title: "&nbsp;", width: 150 }
                    ],
                    editable: true
                });
            };

            self.refreshStores();
        };

        $(function () {
            ko.applyBindings(new ProductManagerViewModel(), $(".products-page")[0]);
        });
    </script>
}